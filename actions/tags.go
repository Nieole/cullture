package actions

import (
	"culture/cache"
	"culture/models"
	"fmt"
	"net/http"
	"time"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/gobuffalo/x/responder"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Tag)
// DB Table: Plural (tags)
// Resource: Plural (Tags)
// Path: Plural (/tags)
// View Template Folder: Plural (/templates/tags/)

// TagsResource is the resource for the Tag model
type TagsResource struct {
	buffalo.Resource
}

// List gets all Tags. This function is mapped to the path
// GET /tags
func (v TagsResource) List(c buffalo.Context) error {
	tags := &models.Tags{}
	err := cache.Once(fmt.Sprintf("cache:tags"), tags, func() (interface{}, error) {
		// Get the DB connection from the context
		tx, ok := c.Value("tx").(*pop.Connection)
		if !ok {
			return nil, fmt.Errorf("no transaction found")
		}

		if err := tx.All(tags); err != nil {
			return nil, err
		}
		return tags, nil
	}, time.Hour*6)
	if err != nil {
		return c.Render(http.StatusBadRequest, Fail("加载缓存数据失败 %v", err))
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(tags))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(tags))
	}).Respond(c)
}

// Show gets the data for one Tag. This function is mapped to
// the path GET /tags/{tag_id}
func (v TagsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Tag
	tag := &models.Tag{}

	// To find the Tag the parameter tag_id is used.
	if err := tx.Find(tag, c.Param("tag_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(tag))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(tag))
	}).Respond(c)
}

// Create adds a Tag to the DB. This function is mapped to the
// path POST /tags
func (v TagsResource) Create(c buffalo.Context) error {
	// Allocate an empty Tag
	tag := &models.Tag{}

	// Bind tag to the html form elements
	if err := c.Bind(tag); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(tag)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(tag))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(tag))
	}).Respond(c)
}

// Update changes a Tag in the DB. This function is mapped to
// the path PUT /tags/{tag_id}
func (v TagsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Tag
	tag := &models.Tag{}

	if err := tx.Find(tag, c.Param("tag_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Tag to the html form elements
	if err := c.Bind(tag); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(tag)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(tag))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(tag))
	}).Respond(c)
}

// Destroy deletes a Tag from the DB. This function is mapped
// to the path DELETE /tags/{tag_id}
func (v TagsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Tag
	tag := &models.Tag{}

	// To find the Tag the parameter tag_id is used.
	if err := tx.Find(tag, c.Param("tag_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(tag); err != nil {
		return err
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(tag))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(tag))
	}).Respond(c)
}
