package actions

import (
	"culture/models"
	"fmt"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/gobuffalo/x/responder"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Organization)
// DB Table: Plural (organizations)
// Resource: Plural (Organizations)
// Path: Plural (/organizations)
// View Template Folder: Plural (/templates/organizations/)

// OrganizationsResource is the resource for the Organization model
type OrganizationsResource struct {
	buffalo.Resource
}

// List gets all Organizations. This function is mapped to the path
// GET /organizations
func (v OrganizationsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	organizations := &models.Organizations{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Organizations from the DB
	if err := q.Eager("Projects").All(organizations); err != nil {
		return err
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(organizations))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(organizations))
	}).Respond(c)
}

// Show gets the data for one Organization. This function is mapped to
// the path GET /organizations/{organization_id}
func (v OrganizationsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Organization
	organization := &models.Organization{}

	// To find the Organization the parameter organization_id is used.
	if err := tx.Find(organization, c.Param("organization_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(organization))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(organization))
	}).Respond(c)
}

// Create adds a Organization to the DB. This function is mapped to the
// path POST /organizations
func (v OrganizationsResource) Create(c buffalo.Context) error {
	// Allocate an empty Organization
	organization := &models.Organization{}

	// Bind organization to the html form elements
	if err := c.Bind(organization); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(organization)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(organization))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(organization))
	}).Respond(c)
}

// Update changes a Organization in the DB. This function is mapped to
// the path PUT /organizations/{organization_id}
func (v OrganizationsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Organization
	organization := &models.Organization{}

	if err := tx.Find(organization, c.Param("organization_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Organization to the html form elements
	if err := c.Bind(organization); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(organization)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(organization))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(organization))
	}).Respond(c)
}

// Destroy deletes a Organization from the DB. This function is mapped
// to the path DELETE /organizations/{organization_id}
func (v OrganizationsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Organization
	organization := &models.Organization{}

	// To find the Organization the parameter organization_id is used.
	if err := tx.Find(organization, c.Param("organization_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(organization); err != nil {
		return err
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(organization))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(organization))
	}).Respond(c)
}
